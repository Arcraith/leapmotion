// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace LeapDB {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using uFrame.Kernel;
    using UniRx;
    
    
    public partial class HardButtonGroup : ReactiveGroup<HardButton> {
        
        private IEcsComponentManagerOf<Hard> _HardManager;
        
        private IEcsComponentManagerOf<Button> _ButtonManager;
        
        private int lastEntityId;
        
        private Hard Hard;
        
        private Button Button;
        
        public IEcsComponentManagerOf<Hard> HardManager {
            get {
                return _HardManager;
            }
            set {
                _HardManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Button> ButtonManager {
            get {
                return _ButtonManager;
            }
            set {
                _ButtonManager = value;
            }
        }
        
        public override System.Collections.Generic.IEnumerable<UniRx.IObservable<int>> Install(uFrame.ECS.IComponentSystem componentSystem) {
            HardManager = componentSystem.RegisterComponent<Hard>();
            yield return HardManager.CreatedObservable.Select(_=>_.EntityId);;
            yield return HardManager.RemovedObservable.Select(_=>_.EntityId);;
            ButtonManager = componentSystem.RegisterComponent<Button>();
            yield return ButtonManager.CreatedObservable.Select(_=>_.EntityId);;
            yield return ButtonManager.RemovedObservable.Select(_=>_.EntityId);;
        }
        
        public override bool Match(int entityId) {
            lastEntityId = entityId;
            if ((Hard = HardManager[entityId]) == null) {
                return false;
            }
            if ((Button = ButtonManager[entityId]) == null) {
                return false;
            }
            return true;
        }
        
        public override HardButton Select() {
            var item = new HardButton();;
            item.EntityId = lastEntityId;
            item.Hard = Hard;
            item.Button = Button;
            return item;
        }
    }
}
