// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace LeapDB {
    using LeapDB;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine;
    using UnityEngine.UI;
    
    
    public partial class DifficultySystemBase : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<ExcerciseManagerComponent> _ExcerciseManagerComponentManager;
        
        private IEcsComponentManagerOf<EasyButton> _EasyButtonManager;
        
        private IEcsComponentManagerOf<IndexFingerComponent> _IndexFingerComponentManager;
        
        private IEcsComponentManagerOf<MediumButton> _MediumButtonManager;
        
        private IEcsComponentManagerOf<MenuButton> _MenuButtonManager;
        
        private IEcsComponentManagerOf<Difficulty> _DifficultyManager;
        
        private IEcsComponentManagerOf<MainButton> _MainButtonManager;
        
        private IEcsComponentManagerOf<HardButton> _HardButtonManager;
        
        private IEcsComponentManagerOf<HandComponent> _HandComponentManager;
        
        private IEcsComponentManagerOf<Easy> _EasyManager;
        
        private IEcsComponentManagerOf<Button> _ButtonManager;
        
        private IEcsComponentManagerOf<Hard> _HardManager;
        
        private IEcsComponentManagerOf<Menu> _MenuManager;
        
        private IEcsComponentManagerOf<Medium> _MediumManager;
        
        public IEcsComponentManagerOf<ExcerciseManagerComponent> ExcerciseManagerComponentManager {
            get {
                return _ExcerciseManagerComponentManager;
            }
            set {
                _ExcerciseManagerComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<EasyButton> EasyButtonManager {
            get {
                return _EasyButtonManager;
            }
            set {
                _EasyButtonManager = value;
            }
        }
        
        public IEcsComponentManagerOf<IndexFingerComponent> IndexFingerComponentManager {
            get {
                return _IndexFingerComponentManager;
            }
            set {
                _IndexFingerComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<MediumButton> MediumButtonManager {
            get {
                return _MediumButtonManager;
            }
            set {
                _MediumButtonManager = value;
            }
        }
        
        public IEcsComponentManagerOf<MenuButton> MenuButtonManager {
            get {
                return _MenuButtonManager;
            }
            set {
                _MenuButtonManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Difficulty> DifficultyManager {
            get {
                return _DifficultyManager;
            }
            set {
                _DifficultyManager = value;
            }
        }
        
        public IEcsComponentManagerOf<MainButton> MainButtonManager {
            get {
                return _MainButtonManager;
            }
            set {
                _MainButtonManager = value;
            }
        }
        
        public IEcsComponentManagerOf<HardButton> HardButtonManager {
            get {
                return _HardButtonManager;
            }
            set {
                _HardButtonManager = value;
            }
        }
        
        public IEcsComponentManagerOf<HandComponent> HandComponentManager {
            get {
                return _HandComponentManager;
            }
            set {
                _HandComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Easy> EasyManager {
            get {
                return _EasyManager;
            }
            set {
                _EasyManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Button> ButtonManager {
            get {
                return _ButtonManager;
            }
            set {
                _ButtonManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Hard> HardManager {
            get {
                return _HardManager;
            }
            set {
                _HardManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Menu> MenuManager {
            get {
                return _MenuManager;
            }
            set {
                _MenuManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Medium> MediumManager {
            get {
                return _MediumManager;
            }
            set {
                _MediumManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            ExcerciseManagerComponentManager = ComponentSystem.RegisterComponent<ExcerciseManagerComponent>(34);
            EasyButtonManager = ComponentSystem.RegisterGroup<EasyButtonGroup,EasyButton>();
            IndexFingerComponentManager = ComponentSystem.RegisterComponent<IndexFingerComponent>(2);
            MediumButtonManager = ComponentSystem.RegisterGroup<MediumButtonGroup,MediumButton>();
            MenuButtonManager = ComponentSystem.RegisterGroup<MenuButtonGroup,MenuButton>();
            DifficultyManager = ComponentSystem.RegisterComponent<Difficulty>(31);
            MainButtonManager = ComponentSystem.RegisterComponent<MainButton>(30);
            HardButtonManager = ComponentSystem.RegisterGroup<HardButtonGroup,HardButton>();
            HandComponentManager = ComponentSystem.RegisterComponent<HandComponent>(1);
            EasyManager = ComponentSystem.RegisterComponent<Easy>(8);
            ButtonManager = ComponentSystem.RegisterComponent<Button>(7);
            HardManager = ComponentSystem.RegisterComponent<Hard>(11);
            MenuManager = ComponentSystem.RegisterComponent<Menu>(20);
            MediumManager = ComponentSystem.RegisterComponent<Medium>(10);
            this.OnEvent<uFrame.ECS.OnTriggerEnterDispatcher>().Subscribe(_=>{ TriggerMediumDifficultyFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.ECS.OnTriggerEnterDispatcher>().Subscribe(_=>{ TriggerHardDifficultyFilter(_); }).DisposeWith(this);
            this.OnEvent<LeapDB.MediumDifficulty>().Subscribe(_=>{ DifficultySystemMediumDifficultyFilter(_); }).DisposeWith(this);
            this.OnEvent<LeapDB.HardDifficulty>().Subscribe(_=>{ DifficultySystemHardDifficultyFilter(_); }).DisposeWith(this);
            this.OnEvent<LeapDB.EasyDifficulty>().Subscribe(_=>{ DifficultySystemEasyDifficultyFilter(_); }).DisposeWith(this);
            this.OnEvent<LeapDB.UpdateExcerciseScreen>().Subscribe(_=>{ DifficultySystemUpdateExcerciseScreenFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.ECS.OnTriggerEnterDispatcher>().Subscribe(_=>{ TriggerEasyDifficultyFilter(_); }).DisposeWith(this);
            this.OnEvent<LeapDB.DeselectMenuButtons>().Subscribe(_=>{ DeselectAllButtonsFilter(_); }).DisposeWith(this);
        }
        
        protected virtual void TriggerMediumDifficultyHandler(uFrame.ECS.OnTriggerEnterDispatcher data, MediumButton collider, IndexFingerComponent source) {
            var handler = new TriggerMediumDifficultyHandler();
            handler.System = this;
            handler.Event = data;
            handler.Collider = collider;
            handler.Source = source;
            handler.Execute();
        }
        
        protected void TriggerMediumDifficultyFilter(uFrame.ECS.OnTriggerEnterDispatcher data) {
            var ColliderItem = MediumButtonManager[data.ColliderId];
            if (ColliderItem == null) {
                return;
            }
            if (!ColliderItem.Enabled) {
                return;
            }
            var SourceIndexFingerComponent = IndexFingerComponentManager[data.EntityId];
            if (SourceIndexFingerComponent == null) {
                return;
            }
            if (!SourceIndexFingerComponent.Enabled) {
                return;
            }
            this.TriggerMediumDifficultyHandler(data, ColliderItem, SourceIndexFingerComponent);
        }
        
        protected virtual void TriggerHardDifficultyHandler(uFrame.ECS.OnTriggerEnterDispatcher data, HardButton collider, IndexFingerComponent source) {
            var handler = new TriggerHardDifficultyHandler();
            handler.System = this;
            handler.Event = data;
            handler.Collider = collider;
            handler.Source = source;
            handler.Execute();
        }
        
        protected void TriggerHardDifficultyFilter(uFrame.ECS.OnTriggerEnterDispatcher data) {
            var ColliderItem = HardButtonManager[data.ColliderId];
            if (ColliderItem == null) {
                return;
            }
            if (!ColliderItem.Enabled) {
                return;
            }
            var SourceIndexFingerComponent = IndexFingerComponentManager[data.EntityId];
            if (SourceIndexFingerComponent == null) {
                return;
            }
            if (!SourceIndexFingerComponent.Enabled) {
                return;
            }
            this.TriggerHardDifficultyHandler(data, ColliderItem, SourceIndexFingerComponent);
        }
        
        protected virtual void DifficultySystemMediumDifficultyHandler(LeapDB.MediumDifficulty data, Difficulty group) {
            var handler = new DifficultySystemMediumDifficultyHandler();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void DifficultySystemMediumDifficultyFilter(LeapDB.MediumDifficulty data) {
            var DifficultyItems = DifficultyManager.Components;
            for (var DifficultyIndex = 0
            ; DifficultyIndex < DifficultyItems.Count; DifficultyIndex++
            ) {
                if (!DifficultyItems[DifficultyIndex].Enabled) {
                    continue;
                }
                this.DifficultySystemMediumDifficultyHandler(data, DifficultyItems[DifficultyIndex]);
            }
        }
        
        protected virtual void DifficultySystemHardDifficultyHandler(LeapDB.HardDifficulty data, Difficulty group) {
            var handler = new DifficultySystemHardDifficultyHandler();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void DifficultySystemHardDifficultyFilter(LeapDB.HardDifficulty data) {
            var DifficultyItems = DifficultyManager.Components;
            for (var DifficultyIndex = 0
            ; DifficultyIndex < DifficultyItems.Count; DifficultyIndex++
            ) {
                if (!DifficultyItems[DifficultyIndex].Enabled) {
                    continue;
                }
                this.DifficultySystemHardDifficultyHandler(data, DifficultyItems[DifficultyIndex]);
            }
        }
        
        protected virtual void DifficultySystemEasyDifficultyHandler(LeapDB.EasyDifficulty data, Difficulty group) {
            var handler = new DifficultySystemEasyDifficultyHandler();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void DifficultySystemEasyDifficultyFilter(LeapDB.EasyDifficulty data) {
            var DifficultyItems = DifficultyManager.Components;
            for (var DifficultyIndex = 0
            ; DifficultyIndex < DifficultyItems.Count; DifficultyIndex++
            ) {
                if (!DifficultyItems[DifficultyIndex].Enabled) {
                    continue;
                }
                this.DifficultySystemEasyDifficultyHandler(data, DifficultyItems[DifficultyIndex]);
            }
        }
        
        protected virtual void DifficultySystemUpdateExcerciseScreenHandler(LeapDB.UpdateExcerciseScreen data, ExcerciseManagerComponent group) {
            var handler = new DifficultySystemUpdateExcerciseScreenHandler();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void DifficultySystemUpdateExcerciseScreenFilter(LeapDB.UpdateExcerciseScreen data) {
            var ExcerciseManagerComponentItems = ExcerciseManagerComponentManager.Components;
            for (var ExcerciseManagerComponentIndex = 0
            ; ExcerciseManagerComponentIndex < ExcerciseManagerComponentItems.Count; ExcerciseManagerComponentIndex++
            ) {
                if (!ExcerciseManagerComponentItems[ExcerciseManagerComponentIndex].Enabled) {
                    continue;
                }
                this.DifficultySystemUpdateExcerciseScreenHandler(data, ExcerciseManagerComponentItems[ExcerciseManagerComponentIndex]);
            }
        }
        
        protected virtual void TriggerEasyDifficultyHandler(uFrame.ECS.OnTriggerEnterDispatcher data, EasyButton collider, IndexFingerComponent source) {
            var handler = new TriggerEasyDifficultyHandler();
            handler.System = this;
            handler.Event = data;
            handler.Collider = collider;
            handler.Source = source;
            handler.Execute();
        }
        
        protected void TriggerEasyDifficultyFilter(uFrame.ECS.OnTriggerEnterDispatcher data) {
            var ColliderItem = EasyButtonManager[data.ColliderId];
            if (ColliderItem == null) {
                return;
            }
            if (!ColliderItem.Enabled) {
                return;
            }
            var SourceIndexFingerComponent = IndexFingerComponentManager[data.EntityId];
            if (SourceIndexFingerComponent == null) {
                return;
            }
            if (!SourceIndexFingerComponent.Enabled) {
                return;
            }
            this.TriggerEasyDifficultyHandler(data, ColliderItem, SourceIndexFingerComponent);
        }
        
        protected virtual void DeselectAllButtonsHandler(LeapDB.DeselectMenuButtons data, MainButton group) {
            var handler = new DeselectAllButtonsHandler();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void DeselectAllButtonsFilter(LeapDB.DeselectMenuButtons data) {
            var MainButtonItems = MainButtonManager.Components;
            for (var MainButtonIndex = 0
            ; MainButtonIndex < MainButtonItems.Count; MainButtonIndex++
            ) {
                if (!MainButtonItems[MainButtonIndex].Enabled) {
                    continue;
                }
                this.DeselectAllButtonsHandler(data, MainButtonItems[MainButtonIndex]);
            }
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("ddaf9895-53e8-422a-8808-cb0a6ae268e0")]
    public partial class DifficultySystem : DifficultySystemBase {
        
        private static DifficultySystem _Instance;
        
        public DifficultySystem() {
            Instance = this;
        }
        
        public static DifficultySystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
